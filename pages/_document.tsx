import React, { ReactElement } from 'react';
import Document, { DocumentContext, DocumentInitialProps, Main, NextScript } from 'next/document';
import { ServerStyleSheet } from 'styled-components';
import CleanCSS from 'clean-css';
import get from 'lodash/get';


interface ReactDocumentInitialProps extends DocumentInitialProps {
  title: ReactElement;
  description: ReactElement;
  keywords: ReactElement;
  image: ReactElement;
  canonicallink: ReactElement;
  gtagScript: string;
  gtagNoScript: string;
  url: string;
  styleTag: ReactElement;
}

function minifyCss(styleTags:any) {
  const miniTag = styleTags;
  const mini = new CleanCSS({}).minify(miniTag.props.dangerouslySetInnerHTML.__html);

  miniTag.props.dangerouslySetInnerHTML.__html = mini.styles;
  return miniTag;
}

export default class MyDocument extends Document<ReactDocumentInitialProps> {
  public static async getInitialProps(
    ctx: DocumentContext,
  ): Promise<ReactDocumentInitialProps> {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;

    ctx.renderPage = (): any | Promise<any> =>
      originalRenderPage({
        enhanceApp: (App): any => (props: any): ReactElement =>
          sheet.collectStyles(
            <App {...props} />,
          ),
      });

    try {
      const initialProps = await Document.getInitialProps(ctx);

      const styleTag = (
        <style
          dangerouslySetInnerHTML={{
            __html: sheet
              .getStyleElement()
              .reduce(
                (
                  css,
                  styleTag: ReactElement<{
                    dangerouslySetInnerHTML?: { __html?: string };
                  }>,
                ): string => {
                  if (
                    !styleTag ||
                    !styleTag.props ||
                    !styleTag.props.dangerouslySetInnerHTML ||
                    !styleTag.props.dangerouslySetInnerHTML.__html
                  ) {
                    return css;
                  }
                  return `${css}${styleTag.props.dangerouslySetInnerHTML.__html}`;
                },
                '',
              ),
          }}
        />
      );
      /* eslint-enable */

      // Get the dynamic `<title />` from the head generated by next.js
      const title = (initialProps.head || []).find(
        (headTag: JSX.Element | null): boolean =>
          !!headTag && headTag.type === 'title',
      ) || <title>Mining24</title>;

      const descriptionTitle = (initialProps.head || []).find(
        (headTag: JSX.Element | null): boolean => {
          return !!headTag && headTag.type === 'meta' && get(headTag, 'props.name', '') === 'description';
        }
      ) || title;

      const description = get(descriptionTitle, 'props.content', false) ?  <meta name="description" content={`${get(descriptionTitle, 'props.content', '')}`} /> : <meta name="description" content="Mining24" />;

      const keywordsTitle = (initialProps.head || []).find(
        (headTag: JSX.Element | null): boolean => {
          return !!headTag && headTag.type === 'meta' && get(headTag, 'props.name', '') === 'keywords';
        }
      ) || '';

      const keywords = get(keywordsTitle, 'props.content', false) ?  <meta name="keywords" content={`${get(keywordsTitle, 'props.content', '')}`} /> : <meta name="keywords" content="keywords" />;

      const image = (initialProps.head || []).find(
        (headTag: JSX.Element | null): boolean => {
          return !!headTag && headTag.type === 'meta' && get(headTag, 'props.name', '') === 'image';
        }
      ) || <meta name="image" content="/staticfiles/images/logo.svg" />;

      const ampLink = (initialProps.head || []).find(
        (headTag: JSX.Element | null): boolean => {
          return !!headTag && headTag.type === 'link' && get(headTag, 'props.rel', '') === 'amphtml';
        }
      ) || '';

      const canonicallink = get(ampLink, 'props.href', false) ?  <link rel="canonical" href={`${get(ampLink, 'props.href', '').replace('', '')}`} /> : <link rel="amphtml" href={``} />;

      // const gtagScript = ``;
      const gtagScript = ``;
      const gtagNoScript = ``;

      return {
        ...initialProps,
        title,
        description,
        keywords,
        image,
        canonicallink,
        gtagScript,
        gtagNoScript,
        url: ctx.asPath || '',
        styleTag,
      };
    } finally {
      sheet.seal();
    }
  }

  public render(): ReactElement {
    const { title, description, keywords, image, canonicallink, gtagScript, styleTag, gtagNoScript, url } = this.props;
    minifyCss(styleTag);

    /* eslint-disable react/no-danger */
    return (
      <html lang="en-US">
        <head>
          {title}
          {description}
          {keywords}
          {canonicallink}

          <link href="/staticfiles/images/favicon/favicon.svg" rel="icon" type="image/svg+xml" />
          <meta charSet='utf-8' />
          <meta content='width=device-width, initial-scale=1, maximum-scale=1' name='viewport' />

          <meta property="og:title" content={`${get(title, 'props.children', 'Mining24')}`} />
          <meta property="og:image" content={`/${get(image, 'props.content', '/staticfiles/images/logo.svg')}`} />
          <meta property="og:type" content="article" />
          <meta property="og:url" content={url} />
          <meta property="og:description" content={`${get(description, 'props.content', 'Mining24')}`} />

          <meta property="twitter:card" content="summary_large_image" />
          <meta property="twitter:url" content={`/${url}`} />
          <meta property="twitter:title" content={`${get(title, 'props.children', 'Mining24')}`} />
          <meta property="twitter:description" content={`${get(description, 'props.content', 'Mining24')}`} />
          <meta property="twitter:image" content={`/${get(image, 'props.content', '/staticfiles/images/logo.svg')}`} />
          <meta property="twitter:image:width" content="2000" />
          <meta property="twitter:image:height" content="450" />
          <meta property="twitter:site" content="Mining24" />

          {styleTag}

        </head>
        <body>
          <div className="body">
            <Main />
          </div>
          <NextScript />
          <script src="/staticfiles/scripts/bundle.js" />
          <script dangerouslySetInnerHTML={{ __html: gtagScript }} />
          <noscript dangerouslySetInnerHTML={{ __html: gtagNoScript }} />
        </body>
      </html>
    );
    /* eslint-enable */
  }
}
